generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Session {
  id             String    @id
  shop           String
  state          String
  isOnline       Boolean   @default(false)
  scope          String?
  expires        DateTime?
  accessToken    String
  mantleApiToken String?
  userId         String?
  firstName      String?
  lastName       String?
  email          String?
  accountOwner   Boolean   @default(false)
  locale         String?
  collaborator   Boolean?  @default(false)
  emailVerified  Boolean?  @default(false)
  store          Store?
}

model Store {
  id                              Int              @id @default(autoincrement())
  sessionId                       String           @unique
  storeName                       String?
  url                             String?
  shopOwnerName                   String?
  currency                        String?
  ianaTimezone                    String?
  planDisplayName                 String?
  isPartnerDevelopment            Boolean?         @default(false)
  isShopifyPlus                   Boolean?         @default(false)
  activeThemeGid                  String?
  appEmbedDisabled                Boolean?         @default(true)
  volumeDiscountFunctionId        String?
  shopifyAutomaticDiscountId      String?
  moneyFormat                     String?
  moneyInEmailsFormat             String?
  moneyWithCurrencyFormat         String?
  moneyWithCurrencyInEmailsFormat String?
  checkoutApiSupported            Boolean?         @default(false)
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime         @updatedAt
  discountBundles                 DiscountBundle[]
  options                         Options[]
  orderAnalytics                  OrderAnalytics[]
  session                         Session          @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  subscriptions                   Subscription[]
}

model DiscountBundle {
  id                  Int      @id @default(autoincrement())
  storeId             Int
  name                String
  type                String   @default("")
  previewEnabled      Boolean  @default(false)
  whichProducts       String   @default("")
  layout              String   @default("")
  priority            Int      @default(0)
  active              Boolean  @default(false)
  selectedProducts    String?
  selectedCollections String?
  excludedProducts    String?
  excludedCollections String?
  volumeBundles       String?
  pricingTiers        String?
  discountCalculation String?
  activeDates         String?
  specificDates       String?
  storeDisplay        String?
  designOptions       String?
  customDesigns       String?
  previewOptions      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  store               Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Subscription {
  id               Int       @id @default(autoincrement())
  storeId          Int
  chargeId         String
  plan             String
  price            String
  currency         String
  status           String
  active           Boolean   @default(false)
  test             Boolean   @default(false)
  trialDays        Int?
  billingOn        DateTime?
  billingPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  store            Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model OrderAnalytics {
  id                   Int      @id @default(autoincrement())
  storeId              Int
  orderId              BigInt
  lineItems            String
  discountedOrderValue Decimal? @db.Decimal(10, 2)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  store                Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Options {
  id        Int      @id @default(autoincrement())
  storeId   Int
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  key       String
  value     String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, key])
}
